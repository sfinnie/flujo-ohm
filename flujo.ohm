/* 
 * Grammar for the Flujo experimental language, see http://flujo-lang.org
 */

FlujoGrammar {

  /*******************************************************************
   Processes.  The means by which data is read, written and
   transformed & the mechanism for generating events.
   ******************************************************************/
  Model
    = ModelElement*

  ModelElement
    = ProcessDefinition
  
  ProcessDefinition
    = "Process" id "(" ProcFormalParams ")" ProcessBody
  
  ProcFormalParams
    = ProcInputParams? ProcOutputParams?
  
  ProcInputParams
    = "in" ListOf<FormalParam, ",">

  ProcOutputParams
    = "out" ListOf<FormalParam, ",">

  FormalParam
    = id ":" TypeName
  
  ProcessBody
    = "{" Statement* "}"
  
  Statement  
    = FlowSource ("|" FlowSink)*

  FlowSource
    = id | literal | Tuple | Selection
  
  Tuple
    = "(" ListOf<Expression, ","> ")"
  
  Expression
    = id | literal

  Selection
    = "[" quantifier TypeName "]"

  quantifier
    = "all" | "one" 

  //Type names start with an upper case 
  TypeName
    = upper id

  FlowSink
    = id

/***************************************************
  Literals.  Note there's no implicit denotation 
  here, and deliberately so.  So quotedLiteral 
  instead of stringLiteral, and unquotedLiteral 
  instead of numeric.  That's a core belief in the 
  language: that these are /representations/ and
  can be interpreted as such for any type: not just
  conventional "built in" types.

  Otherwise, these follow pretty standard rules
  for quoted and unquoted literals.

  These are taken more or less directly from the
  es5.ohm sample grammar in the ohm git repo.
 **************************************************/

  literal
    = unquotedLiteral | quotedLiteral

  unquotedLiteral 
    =  decimalLiteral | hexIntegerLiteral | digitLiteral
  
  decimalLiteral = decimalIntegerLiteral "." decimalDigit* exponentPart -- bothParts
                 |                       "." decimalDigit+ exponentPart -- decimalsOnly
                 | decimalIntegerLiteral                   exponentPart -- integerOnly

  decimalIntegerLiteral = nonZeroDigit decimalDigit*  -- nonZero
                        | "0"                         -- zero
  decimalDigit = "0".."9"
  nonZeroDigit = "1".."9"

  exponentPart = exponentIndicator signedInteger -- present
               |                                 -- absent
  exponentIndicator = "e" | "E"
  signedInteger = "+" decimalDigit* -- positive
                | "-" decimalDigit* -- negative
                |     decimalDigit+ -- noSign

  hexIntegerLiteral = "0x" hexDigit+
                    | "0X" hexDigit+

  // hexDigit defined in Ohm's built-in rules (otherwise: hexDigit = "0".."9" | "a".."f" | "A".."F")

  digitLiteral
    = digit+


  quotedLiteral 
    = "\"" quotedLiteralCharacter* "\""
  
  quotedLiteralCharacter 
    = ~("\"" | "\\" | lineTerminator) sourceCharacter -- nonEscaped
    | "\\" escapeSequence                             -- escaped
    | lineContinuation                                -- lineContinuation

  lineContinuation 
    = "\\" lineTerminatorSequence

  escapeSequence = unicodeEscapeSequence
                 | hexEscapeSequence
                 | characterEscapeSequence  // Must come last.

  unicodeEscapeSequence 
    = "u" hexDigit hexDigit hexDigit hexDigit

  hexEscapeSequence 
    = "x" hexDigit hexDigit

  characterEscapeSequence 
    = singleEscapeCharacter
    | nonEscapeCharacter
  
  singleEscapeCharacter 
    = "'" | "\"" | "\\" | "b" | "f" | "n" | "r" | "t" | "v"
  
  nonEscapeCharacter 
    = ~(escapeCharacter | lineTerminator) sourceCharacter

  escapeCharacter 
    = singleEscapeCharacter | decimalDigit | "x" | "u"

  /*************************************************
   Comments and whitespace - all ignored during 
   parsing
   ************************************************/
  space := whitespace | lineTerminator | comment

  whitespace = "\t"
              | "\x0B"    -- verticalTab
              | "\x0C"    -- formFeed
              | " "
              | "\u00A0"  -- noBreakSpace
              | "\uFEFF"  -- byteOrderMark
              | unicodeSpaceSeparator
  
  unicodeSpaceSeparator = "\u2000".."\u200B" | "\u3000"

  lineTerminator = "\n" | "\r" | "\u2028" | "\u2029"
  lineTerminatorSequence = "\n" | "\r" ~"\n" | "\u2028" | "\u2029" | "\r\n"


  comment = multiLineComment | singleLineComment
  multiLineComment = "/*" (~"*/" sourceCharacter)* "*/"
  singleLineComment = "//" (~lineTerminator sourceCharacter)*

  sourceCharacter = any
  id = letter+

}

